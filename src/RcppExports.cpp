// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// best_subset_selection
List best_subset_selection(NumericMatrix X_r, NumericVector y_r, int max_variables, int top_n, std::string metric, bool use_cv, int cv_folds, int cv_repeats, int cv_seed, bool include_intercept, int max_iterations, double tolerance, int n_threads);
RcppExport SEXP _bestSelectR_best_subset_selection(SEXP X_rSEXP, SEXP y_rSEXP, SEXP max_variablesSEXP, SEXP top_nSEXP, SEXP metricSEXP, SEXP use_cvSEXP, SEXP cv_foldsSEXP, SEXP cv_repeatsSEXP, SEXP cv_seedSEXP, SEXP include_interceptSEXP, SEXP max_iterationsSEXP, SEXP toleranceSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< int >::type max_variables(max_variablesSEXP);
    Rcpp::traits::input_parameter< int >::type top_n(top_nSEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type use_cv(use_cvSEXP);
    Rcpp::traits::input_parameter< int >::type cv_folds(cv_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type cv_repeats(cv_repeatsSEXP);
    Rcpp::traits::input_parameter< int >::type cv_seed(cv_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type include_intercept(include_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(best_subset_selection(X_r, y_r, max_variables, top_n, metric, use_cv, cv_folds, cv_repeats, cv_seed, include_intercept, max_iterations, tolerance, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// predict_best_subset
NumericVector predict_best_subset(List model_info, NumericMatrix X_new, std::string type);
RcppExport SEXP _bestSelectR_predict_best_subset(SEXP model_infoSEXP, SEXP X_newSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model_info(model_infoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_new(X_newSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_best_subset(model_info, X_new, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bestSelectR_best_subset_selection", (DL_FUNC) &_bestSelectR_best_subset_selection, 13},
    {"_bestSelectR_predict_best_subset", (DL_FUNC) &_bestSelectR_predict_best_subset, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bestSelectR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
